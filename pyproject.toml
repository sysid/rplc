[project]
name = "rplc"
version = "0.3.1"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "sysid", email = "sysid@gmx.de" }
]
requires-python = ">=3.12"
dependencies = [
    "typer>=0.15.1",
]

[project.scripts]
rplc = "rplc.bin.cli:app"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"


[tool.uv]
managed = true  # esable automatic locking and syncing of the project.
package = true  # install into project env

[dependency-groups]
dev = [
    "ruff",
    "coverage",
    "bump-my-version",
    "isort",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "mypy",
    "build>=1.2.2.post1",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["py"]

[tool.bumpversion]
current_version = "0.3.1"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[tool.bumpversion.file_patterns]
"**/*.py" = [
    {search = "__version__ = '{current_version}'", replace = "__version__ = '{new_version}'"},
]
"VERSION" = [
    { search = "{current_version}", replace = "{new_version}" },
]
"pyproject.toml" = [
    { search = "version = {current_version}", replace = "version = {new_version}" },
]
[[tool.bumpversion.files]]
filename = "src/rplc/bin/cli.py"
[[tool.bumpversion.files]]
filename = "VERSION"
[[tool.bumpversion.files]]
filename = "pyproject.toml"

[tool.pytest.ini_options]
markers = [
    "integration: marks tests as integration tests",
    "e2e: marks tests as e2e tests, not to be run in CICD"
]
#addopts = "--cov=my_package --cov-report=term-missing"
python_files = "*.py"  # include all python files, ala rust
norecursedirs = ["wip"]  # don't recurse into wip directory


[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.mypy]
ignore_missing_imports = false
namespace_packages = true

[[tool.mypy.overrides]]
module = [
    "pydevd_pycharm",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/twlib"]
omit = [
    "tests/*",
    "**/__main__.py",
    "**/.venv/*",
    "**/site-packages/*",
    "examples/*",
    "tox/entrypoints/**",
]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 70

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 88
indent-width = 4
# Assume Python 3.12
target-version = "py312"


[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
